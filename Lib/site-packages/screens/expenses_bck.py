#!/usr/bin/python -tt

# Expense Calculator

def Expenses(Age, Retirement_Age, Inflation, Current_Expenses):
	Future_Expenses={}
	for x in range(Age,Retirement_Age+1):
		if x==Age:
			Future_Expenses[Age]=Current_Expenses
		else:
			Future_Expenses[x]=Future_Expenses[x-1]*(1+Inflation/100)
	return Future_Expenses

# Modify Expenses

def Modify_Expense(Future_Expenses, Age, Value):
	Future_Expenses[Age]=Value
	return Future_Expenses

# Calculate Balance available for given corpus

def Balance(Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses):
	Current_Balance={}
	for x in range(Age,Retirement_Age+1):
		if x==Age:
			Current_Balance[Age]=Corpus
		else:
			Monthly_Expenses=Expenses[x-1]/12
			Monthly_rate=Deposit_Rate/1200
			Current_Balance[x]=(((1 + Monthly_rate)**12 * (Monthly_rate*Current_Balance[x-1] - Monthly_Expenses) + Monthly_Expenses)/Monthly_rate)
	return Current_Balance

# Calculate Final Balance available at the end

def Final_Balance(Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses):
	End_Balance=Balance(Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)
	return End_Balance[Retirement_Age]

# Calculate minimum Balance to keep handy

def Minimum_Balance(Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses):
	Initial_Corpus=Expenses[Retirement_Age]
	epsilon=0.001
	End_Balance=Final_Balance(Initial_Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)
	if End_Balance>0:
		Min=Initial_Corpus/2
		while Final_Balance(Max, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)>0:
			Min=Min/2
		Max=Initial_Corpus
	elif End_Balance<0:
		Min=Initial_Corpus
		Max=Initial_Corpus*2
		while Final_Balance(Max, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)<0:
			Max=Max*2
	Minimum_Corpus=(Min+Max)/2
	while abs(Final_Balance(Minimum_Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses))>=epsilon:
		if Final_Balance(Minimum_Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)>0:
			Max=Minimum_Corpus
		elif Final_Balance(Minimum_Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)<0:
			Min=Minimum_Corpus
		Minimum_Corpus=(Min+Max)/2
	return Minimum_Corpus



	
def main():
	Age=int(input("Enter your Age : "))
	Retirement_Age=int(input("Enter your Retirement Age : "))
	Inflation_rate=int(input("Enter the Inflation rate : "))
	Deposit_rate=int(input("Enter the Deposit rate : "))
	Corpus=int(input("Enter the Corpus : "))
	Annual_Expenses=int(input("Enter current Annual Expenses : "))
	Future_Expenses=Expenses(Age, Retirement_Age, Inflation_rate, Annual_Expenses)
	for key in Future_Expenses:
		print(f'Age->{key} Expenses->{Future_Expenses[key]}')
	Annual_Balance=Balance(Corpus, Age, Retirement_Age, Deposit_rate, Inflation_rate, Future_Expenses)
	for key in Annual_Balance:
		print(f'Age->{key} Balance->{Annual_Balance[key]}')
	Min_Corpus=Minimum_Balance(Age, Retirement_Age, Deposit_rate, Inflation_rate, Future_Expenses)
	print(f'Minimum Corpus required is {Min_Corpus}')

if __name__ == '__main__':
  main()
