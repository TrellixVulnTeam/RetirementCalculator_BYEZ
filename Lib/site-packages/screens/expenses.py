#!/usr/bin/python -tt

# Expense Calculator

class Expense_Calculator(object):
	def Expenses(self, Age, Retirement_Age, Inflation, Current_Expenses):
		self.Future_Expenses={}
		for x in range(Age,Retirement_Age+1):
			if x==Age:
				self.Future_Expenses[Age]=Current_Expenses
			else:
				self.Future_Expenses[x]=self.Future_Expenses[x-1]*(1+Inflation/100)
		return self.Future_Expenses

# Modify Expenses

	def Modify_Expense(self, Future_Expenses, Age, Value):
		self.Future_Expenses[Age]=Value
		return self.Future_Expenses

# Calculate Balance available for given corpus

	def Balance(self, Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses):
		self.Current_Balance={}
		for x in range(Age,Retirement_Age+1):
			if x==Age:
				self.Current_Balance[Age]=Corpus
			else:
				self.Monthly_Expenses=Expenses[x-1]/12
				self.Monthly_rate=Deposit_Rate/1200
				self.Current_Balance[x]=(((1 + self.Monthly_rate)**12 * (self.Monthly_rate*self.Current_Balance[x-1] - self.Monthly_Expenses) + self.Monthly_Expenses)/self.Monthly_rate)
		return self.Current_Balance

# Calculate Final Balance available at the end

	def Final_Balance(self, Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses):
		self.End_Balance=self.Balance(Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)
		return self.End_Balance[Retirement_Age]

# Calculate minimum Balance to keep handy

	def Minimum_Balance(self, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses):
		self.Initial_Corpus=Expenses[Retirement_Age]
		epsilon=0.001
		self.End_Balance=self.Final_Balance(self.Initial_Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)
		if self.End_Balance>0:
			Min=self.Initial_Corpus/2
			while self.Final_Balance(Max, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)>0:
				Min=Min/2
			Max=self.Initial_Corpus
		elif self.End_Balance<0:
			Min=self.Initial_Corpus
			Max=self.Initial_Corpus*2
			while self.Final_Balance(Max, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)<0:
				Max=Max*2
		self.Minimum_Corpus=(Min+Max)/2
		while abs(self.Final_Balance(self.Minimum_Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses))>=epsilon:
			if self.Final_Balance(self.Minimum_Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)>0:
				Max=self.Minimum_Corpus
			elif self.Final_Balance(self.Minimum_Corpus, Age, Retirement_Age, Deposit_Rate, Inflation_rate, Expenses)<0:
				Min=self.Minimum_Corpus
			self.Minimum_Corpus=(Min+Max)/2
		return self.Minimum_Corpus



	

#	Age=int(input("Enter your Age : "))
#	Retirement_Age=int(input("Enter your Retirement Age : "))
#	Inflation_rate=int(input("Enter the Inflation rate : "))
#	Deposit_rate=int(input("Enter the Deposit rate : "))
#	Corpus=int(input("Enter the Corpus : "))
#	Annual_Expenses=int(input("Enter current Annual Expenses : "))
#	Future_Expenses=Expenses(Age, Retirement_Age, Inflation_rate, Annual_Expenses)
#	for key in Future_Expenses:
#		print(f'Age->{key} Expenses->{Future_Expenses[key]}')
#	Annual_Balance=Balance(Corpus, Age, Retirement_Age, Deposit_rate, Inflation_rate, Future_Expenses)
#	for key in Annual_Balance:
#		print(f'Age->{key} Balance->{Annual_Balance[key]}')
#	Min_Corpus=Minimum_Balance(Age, Retirement_Age, Deposit_rate, Inflation_rate, Future_Expenses)
#	print(f'Minimum Corpus required is {Min_Corpus}')

#if __name__ == '__main__':
#  main()
